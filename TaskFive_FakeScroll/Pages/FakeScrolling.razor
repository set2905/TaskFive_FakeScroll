@page "/"
@using System.Text;
@using TaskFive_FakeScroll.Models;
@using TaskFive_FakeScroll.Services.Interfaces;
@inject HttpClient Http
@inject IFakePersonGenService FakePersonGenService
@inject IErrorGenerationService ErrorGenService

<PageTitle>Fake people</PageTitle>
<RadzenRow>
    <RadzenColumn OffsetMD="1" SizeMD="10" Style="height:10vh">
        <RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
                    <RadzenText>
                        Locale
                    </RadzenText>
                    <RadzenDropDown TValue="string" Value=@currentLocale Data=@locales Change="@HandleLocaleChange" Style="width: 100%; max-width: 400px;" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
                    <RadzenText>
                        Seed
                    </RadzenText>
                    <RadzenTextBox ValueChanged="@HandleSeedChange" class="w-100" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
                    <RadzenText>
                        Error value
                    </RadzenText>
                    <RadzenNumeric TValue="int" Value=@currentErrAmount Min="0" Max="1000" Change="@((args)=>HandleErrorNumericChange(args))" class="w-100" />
                    <RadzenSlider TValue="int" Value=@currentErrAmount Min="0" Max="10" Change="@((args)=>HandleErrorNumericChange(args))" Step="1"></RadzenSlider>
                </RadzenStack>
            </RadzenStack>
        </RadzenRow>

        <RadzenRow JustifyContent="JustifyContent.Center">

            <RadzenDataGrid @ref="grid" AllowColumnResize="true" Responsive="true" Density="Density.Default" Data="@fakePeople" Count="@count" LoadData="@LoadData" TItem="FakePerson" VirtualizationOverscanCount="10" AllowVirtualization="true" Style="height:100%; max-height:80vh">
                <Columns>
                    <RadzenDataGridColumn MinWidth="25px" Width="25px" TItem="FakePerson" Property="Num" Title="№" />
                    <RadzenDataGridColumn Width="100px" TItem="FakePerson" Property="FullName" Title="Full Name" />
                    <RadzenDataGridColumn Width="100px" TItem="FakePerson" Property="Phone" Title="Phone Number" />
                    <RadzenDataGridColumn Width="300px" TItem="FakePerson" Property="FullAddress" Title="Address" />
                </Columns>
            </RadzenDataGrid>

        </RadzenRow>
    </RadzenColumn>
</RadzenRow>

@code {
    private RadzenDataGrid<FakePerson> grid = new();
    private IEnumerable<FakePerson>? fakePeople;
    private int count = 10;
    private string currentLocale = "en";
    private readonly List<string> locales = new()
    {
      "en",
      "ru",
      "de"
    };

    private int currentSkip;
    private int currentTop;
    private int currentSeed;
    private int currentErrAmount;

    private bool isRefreshInProgress = false;

    private async Task LoadData(LoadDataArgs args)
    {
        if (isRefreshInProgress) return;
        if (args == null) return;
        if (args.Skip == null||args.Top == null) return;
        await Generate((int)args.Skip, (int)args.Top);
        currentSkip = (int)args.Skip;
        currentTop = (int)args.Top;
        if (count >= int.MaxValue - 11) return;
        count = fakePeople.Last().Num+11;
    }

    private async Task Generate(int skip, int top, bool refresh = false)
    {
        if (refresh)
        {
            isRefreshInProgress = refresh;
            await grid.Reload();
        }
        fakePeople = FakePersonGenService.GetFakePersons(skip, top, currentLocale, currentSeed);
        ApplyErrors();
        isRefreshInProgress = false;
    }

    private async Task HandleLocaleChange(object locale)
    {
        currentLocale = $"{locale}";
        FakePersonGenService.Refresh(fakePeople, currentSeed, currentLocale);
        ApplyErrors();
    }

    private async Task HandleSeedChange(string value)
    {
        currentSeed = value.GetHashCode();
        FakePersonGenService.Refresh(fakePeople, currentSeed, currentLocale);
        ApplyErrors();
    }

    private async Task HandleErrorNumericChange(int value)
    {
        currentErrAmount = value;
        FakePersonGenService.Refresh(fakePeople, currentSeed, currentLocale);
        ApplyErrors();
    }
    private void ApplyErrors()
    {
        foreach (FakePerson person in fakePeople)
        {
            var fullNameBuilder = new StringBuilder(person.FullName);
            var addressBuilder = new StringBuilder(person.FullAddress);
            ErrorGenService.ApplyRandomErrors(currentErrAmount, person.Random, currentLocale, fullNameBuilder, addressBuilder);
            person.FullName=fullNameBuilder.ToString();
        }
    }
}
