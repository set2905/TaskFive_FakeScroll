@page "/"
@using System.Text;
@using TaskFive_FakeScroll.Models;
@using TaskFive_FakeScroll.Services.Interfaces;
@inject HttpClient Http
@inject IFakePersonGenService FakePersonGenService
@inject IErrorGenerationService ErrorGenService
@inject IExporterService Exporter
@inject NotificationService NotificationService

<PageTitle>Fake people</PageTitle>
<RadzenRow>
    <RadzenColumn OffsetMD="1" SizeMD="10" Style="height:10vh">
        <RadzenRow>
            <RadzenPanel AllowCollapse="false" Class="rz-mx-auto w-100">
                <HeaderTemplate>
                    <RadzenText TextStyle="TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-mb-4">
                        <RadzenIcon Icon="input" class="rz-mr-1" /><b>Settings</b>
                    </RadzenText>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Wrap="FlexWrap.NoWrap">
                            <RadzenText>
                                Locale:
                            </RadzenText>
                            <RadzenDropDown TValue="string" Value=@currentLocale Data=@locales Change="@HandleLocaleChange" />
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Wrap="FlexWrap.NoWrap">
                            <RadzenText>
                                Seed:
                            </RadzenText>
                            <RadzenTextBox ValueChanged="@HandleSeedChange" />
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Wrap="FlexWrap.NoWrap">
                            <RadzenText>
                                Error value:
                            </RadzenText>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
                                <RadzenNumeric TValue="double" Value=@currentErrFrequency Min="0" Max="1000" Change="@((args)=>HandleErrorNumericChange(args))" Step="0.25" />
                                <RadzenSlider TValue="double" Value="@sliderErrFrequency" Min="0" Max="10" Change="@((args)=>HandleErrorSliderChange(args))" Step="0.25"></RadzenSlider>
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenButton Click="@Export">

                        </RadzenButton>
                    </RadzenStack>
                </ChildContent>
            </RadzenPanel>
        </RadzenRow>

        <RadzenRow JustifyContent="JustifyContent.Center">

            <RadzenDataGrid @ref="grid" AllowColumnResize="true" Responsive="true" Density="Density.Default" Data="@fakePeople" Count="@count" LoadData="@LoadData" TItem="FakePerson" VirtualizationOverscanCount="10" AllowVirtualization="true" Style="height:100%; max-height:80vh">
                <Columns>
                    <RadzenDataGridColumn MinWidth="25px" Width="25px" TItem="FakePerson" Property="Num" Title="№" />
                    <RadzenDataGridColumn Width="100px" TItem="FakePerson" Property="Id" Title="Id" />
                    <RadzenDataGridColumn Width="100px" TItem="FakePerson" Property="FullName" Title="Full Name" />
                    <RadzenDataGridColumn Width="100px" TItem="FakePerson" Property="Phone" Title="Phone Number" />
                    <RadzenDataGridColumn Width="300px" TItem="FakePerson" Property="FullAddress" Title="Address" />
                </Columns>
            </RadzenDataGrid>

        </RadzenRow>
    </RadzenColumn>
</RadzenRow>

@code {
    private RadzenDataGrid<FakePerson> grid = new();
    private IEnumerable<FakePerson>? fakePeople;
    private int count = 10;
    private string currentLocale = "en";
    private readonly List<string> locales = new()
    {
      "en",
      "fr",
      "de",
      "it",
      "lv"
    };

    private int currentSkip;
    private int currentTop;
    private int currentSeed;
    private double currentErrFrequency = 0;
    private double sliderErrFrequency = 0;

    private void LoadData(LoadDataArgs args)
    {
        if (args == null) return;
        if (args.Skip == null||args.Top == null) return;
        Generate((int)args.Skip, (int)args.Top);
        currentSkip = (int)args.Skip;
        currentTop = (int)args.Top;
        if (count >= int.MaxValue - 11) return;
        if (fakePeople == null) return;
        count = fakePeople.Last().Num+11;
    }

    private void Generate(int skip, int top)
    {
        fakePeople = FakePersonGenService.GetFakePersons(skip, top, currentLocale, currentSeed);
        ApplyErrors();
    }

    private void HandleLocaleChange(object locale)
    {
        if (fakePeople == null) return;
        try
        {
            FakePersonGenService.Refresh(fakePeople, currentSeed, $"{locale}");
        }
        catch (Exception ex)
        {
            ShowError(ex.Message);
            return;
        }
        currentLocale = $"{locale}";
        ApplyErrors();
    }

    private void HandleSeedChange(string value)
    {
        if (fakePeople == null) return;
        int parsedSeed;
        if (!int.TryParse(value, out parsedSeed)) parsedSeed = value.GetHashCode();
        try
        {
            FakePersonGenService.Refresh(fakePeople, parsedSeed, currentLocale);
        }
        catch (Exception ex)
        {
            ShowError(ex.Message);
            return;
        }
        currentSeed = parsedSeed;
        ApplyErrors();
    }

    private void HandleErrorNumericChange(double value)
    {
        if (fakePeople == null) return;
        currentErrFrequency = value;
        sliderErrFrequency = Math.Min(value, 10);
        FakePersonGenService.Refresh(fakePeople, currentSeed, currentLocale);
        ApplyErrors();
    }
    private void HandleErrorSliderChange(double value)
    {
        HandleErrorNumericChange(value);
    }
    private void ApplyErrors()
    {
        if (fakePeople == null) return;
        foreach (FakePerson person in fakePeople)
        {
            var fullNameBuilder = new StringBuilder(person.FullName);
            var addressBuilder = new StringBuilder(person.FullAddress);
            ErrorGenService.ApplyRandomErrors(currentErrFrequency, person.Random, currentLocale, fullNameBuilder, addressBuilder);
            person.FullName=fullNameBuilder.ToString();
            person.FullAddress=addressBuilder.ToString();
        }
    }
    private void ShowError(string message)
    {
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail=message, Duration = 4000, CloseOnClick = true, Payload = DateTime.Now });
    }
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
    private async Task Export()
    {
        if (fakePeople == null) return;
        await Exporter.DownloadExport(fakePeople);
    }
}
